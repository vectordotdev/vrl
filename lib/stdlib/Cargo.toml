[package]
name = "vrl-stdlib"
version = "0.1.0"
authors = ["Vector Contributors <vector@datadoghq.com>"]
edition = "2021"
publish = false
license = "MPL-2.0"

[dependencies]
value = { path = "../value", default-features = false }

datadog-filter = { path = "../datadog/filter", optional = true }
datadog-search-syntax = { path = "../datadog/search-syntax", optional = true }
lookup_lib = {package = "lookup", path = "../lookup", optional = true }
vrl-core = { path = "../core" }
vrl-compiler = { path = "../compiler" }
vrl-diagnostic = { path = "../diagnostic" }

base16 = { version = "0.2", optional = true }
base64 = { version = "0.21", optional = true }
bytes = { version = "1.4.0", optional = true }
charset = { version = "0.1.3", optional = true }
chrono = { version = "0.4", optional = true }
cidr-utils = { version = "0.5", optional = true }
csv = { version = "1.2", optional = true }
data-encoding = { version = "2.3.3", optional = true }
flate2 = { version = "1.0.25", default-features = false, features = ["default"], optional = true }
hex = { version = "0.4", optional = true }
hmac = { version = "0.12.1", optional = true }
indexmap = { version = "~1.9.2", default-features = false, optional = true}
indoc = "2.0.1"
ordered-float = "3.7.0"
md-5 = { version = "0.10", optional = true }
nom = { version = "7", optional = true }
percent-encoding = { version = "2.2", optional = true }
once_cell = { version = "1.17", optional = true }
quoted_printable = {version = "0.4.7", optional = true }
rand = { version = "0.8.5", optional = true }
regex = { version = "1", optional = true }
rust_decimal = { version = "1", optional = true }
seahash = { version = "4.1.0", optional = true }
serde = { version = "1", default-features = false, features = ["derive"], optional = true }
serde_json = { version = "1", optional = true }
sha-1 = { version = "0.10", optional = true }
sha-2 = { package = "sha2", version = "0.10", optional = true }
sha-3 = { package = "sha3", version = "0.10", optional = true }
strip-ansi-escapes = { version = "0.1", optional = true }
syslog_loose = { version = "0.18", optional = true }
tracing = { version = "0.1", optional = true }
url = { version = "2", optional = true }
uuid = { version = "1", features = ["v4"], optional = true }
roxmltree = { version = "0.18.0", optional = true }
woothee = { version = "0.13.0", optional = true }
uaparser = { version = "0.6.0", default-features = false, optional = true }
utf8-width = { version = "0.1.6", optional = true }
zstd = { version = "0.12.2", default-features = false, features = ["wasm"], optional = true }

# Cryptography
aes = { version = "0.8.2", optional = true }

# Cryptography - Block Modes
ctr = { version = "0.9.2", optional = true }
cbc = { version = "0.1.2", optional = true, features = ["alloc"] }
cfb-mode = { version = "0.8.2", optional = true }
ofb = { version = "0.6.1", optional = true }

# Dependencies that don't work in WASM
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
dns-lookup = { version = "1.0.8", optional = true }
hostname = { version = "0.3", optional = true }
grok = { version = "2", optional = true }
datadog-grok = { path = "../datadog/grok", optional = true }

[dev-dependencies]
anyhow = "1"
chrono-tz = "0.8"
criterion = "0.4"
tracing-test = "0.2"
value = { path = "../value", features = ["test"] }
vrl-core = { path = "../core", features = ["test"] }
vrl = { path = "../.." , features = ["test"]}

[features]
default = [
    "abs",
    "append",
    "array",
    "assert",
    "assert_eq",
    "boolean",
    "ceil",
    "chunks",
    "compact",
    "contains",
    "decode_base16",
    "decode_base64",
    "decode_gzip",
    "decode_percent",
    "decode_mime_q",
    "decode_zlib",
    "decode_zstd",
    "decrypt",
    "del",
    "downcase",
    "encode_base16",
    "encode_base64",
    "encode_gzip",
    "encode_json",
    "encode_key_value",
    "encode_logfmt",
    "encode_percent",
    "encode_zlib",
    "encode_zstd",
    "encrypt",
    "ends_with",
    "exists",
    "filter",
    "find",
    "flatten",
    "float",
    "floor",
    "for_each",
    "format_int",
    "format_number",
    "format_timestamp",
    "get",
    "get_env_var",
    "get_hostname",
    "hmac",
    "includes",
    "integer",
    "ip_aton",
    "ip_cidr_contains",
    "ip_subnet",
    "ip_ntoa",
    "ip_ntop",
    "ip_pton",
    "ip_to_ipv6",
    "ipv6_to_ipv4",
    "is_array",
    "is_boolean",
    "is_empty",
    "is_float",
    "is_integer",
    "is_ipv4",
    "is_ipv6",
    "is_json",
    "is_null",
    "is_nullish",
    "is_object",
    "is_regex",
    "is_string",
    "is_timestamp",
    "join",
    "keys",
    "length",
    "log",
    "map_keys",
    "map_values",
    "match",
    "match_any",
    "match_array",
    "match_datadog_query",
    "md5",
    "merge",
    "mod",
    "now",
    "object",
    "parse_aws_alb_log",
    "parse_aws_cloudwatch_log_subscription_message",
    "parse_aws_vpc_flow_log",
    "parse_apache_log",
    "parse_cef",
    "parse_common_log",
    "parse_csv",
    "parse_duration",
    "parse_glog",
    "parse_grok",
    "parse_groks",
    "parse_int",
    "parse_json",
    "parse_key_value",
    "parse_klog",
    "parse_linux_authorization",
    "parse_logfmt",
    "parse_nginx_log",
    "parse_query_string",
    "parse_regex",
    "parse_regex_all",
    "parse_ruby_hash",
    "parse_syslog",
    "parse_timestamp",
    "parse_tokens",
    "parse_url",
    "parse_user_agent",
    "parse_xml",
    "push",
    "random_bool",
    "random_bytes",
    "random_float",
    "random_int",
    "redact",
    "remove",
    "replace",
    "reverse_dns",
    "round",
    "seahash",
    "set",
    "sha1",
    "sha2",
    "sha3",
    "slice",
    "split",
    "starts_with",
    "string",
    "strip_ansi_escape_codes",
    "strip_whitespace",
    "strlen",
    "tally",
    "tally_value",
    "tag_types_externally",
    "timestamp",
    "to_bool",
    "to_float",
    "to_int",
    "to_string",
    "to_regex",
    "to_syslog_facility",
    "to_syslog_level",
    "to_syslog_severity",
    "to_timestamp",
    "to_unix_timestamp",
    "truncate",
    "type_def",
    "unique",
    "unnest",
    "upcase",
    "uuid_v4",
    "values"
]

abs = []
append = []
array = []
assert = []
assert_eq = []
boolean = []
ceil = []
chunks = []
compact = []
contains = []
cryptography = ["dep:aes", "dep:ctr", "dep:cbc", "dep:cfb-mode", "dep:ofb"]
decode_base16 = ["dep:base16"]
decode_base64 = ["dep:base64"]
decode_gzip = ["dep:flate2"]
decode_percent = ["dep:percent-encoding"]
decode_mime_q = ["dep:data-encoding","dep:charset","dep:quoted_printable"]
decode_zlib = ["dep:flate2"]
decode_zstd = ["dep:zstd"]
decrypt = ["cryptography", "random_bytes", "encrypt"]
del = []
downcase = []
encode_base16 = ["dep:base16"]
encode_base64 = ["dep:base64"]
encode_gzip = ["dep:flate2"]
encode_json = ["dep:serde_json", "value/json", "dep:chrono", "dep:regex"]
encode_key_value = ["value/json"]
encode_logfmt = ["encode_key_value"]
encode_percent = ["dep:percent-encoding"]
encode_zlib = ["dep:flate2"]
encode_zstd = ["dep:zstd"]
encrypt = ["cryptography", "random_bytes", "decrypt"]
ends_with = []
exists = []
filter = []
find = ["dep:regex"]
find_table_row = []
flatten = []
float = []
floor = []
for_each = []
format_int = []
format_number = ["dep:rust_decimal"]
format_timestamp = ["dep:chrono"]
get = ["dep:lookup_lib"]
get_env_var = []
get_hostname = ["dep:hostname"]
hmac = ["dep:hmac", "dep:sha-1", "dep:sha-2", "dep:hex", "dep:base64"]
includes = []
integer = []
ip_aton = []
ip_cidr_contains = ["dep:cidr-utils"]
ip_ntoa = []
ip_ntop = []
ip_pton = ["dep:bytes"]
ip_subnet = ["dep:once_cell", "dep:regex"]
ip_to_ipv6 = []
ipv6_to_ipv4 = []
is_array = []
is_boolean = []
is_empty = []
is_float = []
is_integer = []
is_ipv4 = []
is_ipv6 = []
is_json = ["dep:serde", "dep:serde_json", "value/json"]
is_null = []
is_nullish = []
is_object = []
is_regex = ["dep:regex"]
is_string = []
is_timestamp = ["dep:chrono"]
join = []
keys = []
length = []
log = ["dep:tracing", "value/json"]
map_keys = []
map_values = []
match = ["dep:regex"]
match_any = ["dep:regex"]
match_array = ["dep:regex"]
match_datadog_query = ["dep:datadog-search-syntax", "dep:datadog-filter", "dep:once_cell", "dep:regex", "dep:lookup_lib"]
md5 = ["dep:md-5", "dep:hex"]
merge = []
mod = []
now = ["dep:chrono"]
object = []
parse_apache_log = ["dep:chrono", "dep:once_cell", "dep:regex"]
parse_aws_alb_log = ["dep:nom"]
parse_aws_cloudwatch_log_subscription_message = ["dep:serde_json", "dep:chrono"]
parse_aws_vpc_flow_log = []
parse_common_log = ["dep:chrono", "dep:once_cell", "dep:regex"]
parse_cef = ["parse_key_value"]
parse_csv = ["dep:csv"]
parse_duration = ["dep:rust_decimal", "dep:once_cell", "dep:regex"]
parse_glog = ["dep:chrono", "dep:once_cell", "dep:regex"]
parse_grok = ["dep:grok"]
parse_groks = ["dep:grok", "dep:datadog-grok"]
parse_int = []
parse_json = ["dep:serde_json", "value/json"]
parse_key_value = ["dep:nom"]
parse_klog = ["dep:chrono", "dep:once_cell", "dep:regex"]
parse_linux_authorization = ["parse_syslog", "dep:chrono"]
parse_logfmt = ["parse_key_value"]
parse_nginx_log = ["dep:chrono", "dep:regex", "dep:once_cell"]
parse_query_string = ["dep:url"]
parse_regex = ["dep:regex"]
parse_regex_all = ["dep:regex"]
parse_ruby_hash = ["dep:nom"]
parse_syslog = ["dep:syslog_loose", "dep:chrono"]
parse_timestamp = ["dep:chrono"]
parse_tokens = []
parse_url = ["dep:url"]
parse_user_agent = ["dep:woothee","dep:uaparser","dep:once_cell"]
parse_xml = ["dep:roxmltree", "dep:once_cell", "dep:regex"]
push = []
random_bool = ["dep:rand"]
random_bytes = ["dep:rand"]
random_float = ["dep:rand"]
random_int = ["dep:rand"]
redact = ["dep:once_cell", "dep:regex"]
remove = ["dep:lookup_lib"]
replace = ["dep:regex"]
reverse_dns = ["dep:dns-lookup"]
round = []
seahash = ["dep:seahash"]
set = ["dep:lookup_lib"]
sha1 = ["dep:sha-1", "dep:hex"]
sha2 = ["dep:sha-2", "dep:hex"]
sha3 = ["dep:sha-3", "dep:hex"]
slice = []
split = ["dep:regex"]
starts_with = ["dep:utf8-width"]
string = []
strip_ansi_escape_codes = ["dep:bytes", "dep:strip-ansi-escapes"]
strip_whitespace = []
strlen = []
tag_types_externally = ["dep:chrono", "dep:regex"]
tally = []
tally_value = []
timestamp = []
to_bool = []
to_float = ["dep:chrono"]
to_int = ["dep:chrono"]
to_regex = ["dep:tracing", "dep:regex"]
to_string = ["dep:chrono"]
to_syslog_facility = []
to_syslog_level = []
to_syslog_severity = []
to_timestamp = ["dep:chrono"]
to_unix_timestamp = ["dep:chrono"]
type_def = []
truncate = []
unique = ["dep:indexmap"]
unnest = ["dep:lookup_lib"]
upcase = []
uuid_v4 = ["dep:bytes", "dep:uuid"]
values = []

[lib]
bench = false

[[bench]]
name = "benches"
harness = false
required-features = ["default"]

