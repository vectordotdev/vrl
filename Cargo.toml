[package]
name = "vrl"
version = "0.4.0"
authors = ["Vector Contributors <vector@datadoghq.com>"]
edition = "2021"
license = "MPL-2.0"
description = "Vector Remap Language"
homepage = "https://vrl.dev/"
repository = "https://github.com/vectordotdev/vrl"
readme = "README.md"
keywords = ["vector", "datadog", "compiler"]
categories = ["compilers"]

[workspace]
members = [
  ".",
  "lib/cli",
  "lib/tests"
]


[features]
default = ["compiler", "value", "diagnostic", "path", "parser", "stdlib", "datadog", "core"]

# Main features (on by default)
compiler = ["diagnostic", "path", "parser", "value", "dep:paste", "dep:chrono", "dep:serde", "dep:regex", "dep:bytes", "dep:ordered-float", "dep:chrono-tz", "dep:snafu", "dep:tracing",
"dep:thiserror", "dep:anymap", "dep:dyn-clone", "dep:indoc", "dep:thiserror", "dep:lalrpop-util"]
value = ["path", "dep:bytes", "dep:regex", "dep:ordered-float", "dep:chrono", "dep:serde_json"]
diagnostic = ["dep:codespan-reporting", "dep:termcolor"]
path = ["dep:once_cell", "dep:serde", "dep:snafu", "dep:regex"]
parser = ["path", "diagnostic", "dep:thiserror", "dep:ordered-float", "dep:lalrpop-util"]
core = ["value", "dep:snafu", "dep:nom"]

# Datadog related features (on by default)
datadog = ["datadog_filter", "datadog_grok", "datadog_search"]
datadog_filter = ["datadog_search", "dep:regex", "dep:dyn-clone"]
datadog_grok = ["value", "dep:nom", "dep:peeking_take_while", "dep:serde_json", "dep:onig", "dep:lalrpop-util", "dep:thiserror", "dep:chrono", "dep:chrono-tz", "dep:tracing"]
datadog_search = ["dep:pest", "dep:pest_derive", "dep:itertools", "dep:once_cell", "dep:regex"]

# Features that aren't used as often (default off)
cli = ["stdlib", "dep:serde_json", "dep:thiserror", "dep:clap", "dep:exitcode", "dep:webbrowser", "dep:rustyline", "dep:prettytable-rs"]
test_framework = ["compiler", "dep:prettydiff", "dep:serde_json", "dep:ansi_term"]
arbitrary = ["dep:quickcheck", "dep:arbitrary"]
lua = ["dep:mlua"]

# Internal testing utilities (used for benches)
test = []

# stdlib without any functions
stdlib-core = ["compiler"]

stdlib = [
    "stdlib-core",
    "stdlib_abs",
    "stdlib_append",
    "stdlib_array",
    "stdlib_assert",
    "stdlib_assert_eq",
    "stdlib_boolean",
    "stdlib_ceil",
    "stdlib_chunks",
    "stdlib_compact",
    "stdlib_contains",
    "stdlib_decode_base16",
    "stdlib_decode_base64",
    "stdlib_decode_gzip",
    "stdlib_decode_percent",
    "stdlib_decode_mime_q",
    "stdlib_decode_zlib",
    "stdlib_decode_zstd",
    "stdlib_decrypt",
    "stdlib_del",
    "stdlib_downcase",
    "stdlib_encode_base16",
    "stdlib_encode_base64",
    "stdlib_encode_gzip",
    "stdlib_encode_json",
    "stdlib_encode_key_value",
    "stdlib_encode_logfmt",
    "stdlib_encode_percent",
    "stdlib_encode_zlib",
    "stdlib_encode_zstd",
    "stdlib_encrypt",
    "stdlib_ends_with",
    "stdlib_exists",
    "stdlib_filter",
    "stdlib_find",
    "stdlib_flatten",
    "stdlib_float",
    "stdlib_floor",
    "stdlib_for_each",
    "stdlib_format_int",
    "stdlib_format_number",
    "stdlib_format_timestamp",
    "stdlib_get",
    "stdlib_get_env_var",
    "stdlib_get_hostname",
    "stdlib_hmac",
    "stdlib_includes",
    "stdlib_integer",
    "stdlib_ip_aton",
    "stdlib_ip_cidr_contains",
    "stdlib_ip_subnet",
    "stdlib_ip_ntoa",
    "stdlib_ip_ntop",
    "stdlib_ip_pton",
    "stdlib_ip_to_ipv6",
    "stdlib_ipv6_to_ipv4",
    "stdlib_is_array",
    "stdlib_is_boolean",
    "stdlib_is_empty",
    "stdlib_is_float",
    "stdlib_is_integer",
    "stdlib_is_ipv4",
    "stdlib_is_ipv6",
    "stdlib_is_json",
    "stdlib_is_null",
    "stdlib_is_nullish",
    "stdlib_is_object",
    "stdlib_is_regex",
    "stdlib_is_string",
    "stdlib_is_timestamp",
    "stdlib_join",
    "stdlib_keys",
    "stdlib_length",
    "stdlib_log",
    "stdlib_map_keys",
    "stdlib_map_values",
    "stdlib_match",
    "stdlib_match_any",
    "stdlib_match_array",
    "stdlib_match_datadog_query",
    "stdlib_md5",
    "stdlib_merge",
    "stdlib_mod",
    "stdlib_now",
    "stdlib_object",
    "stdlib_parse_aws_alb_log",
    "stdlib_parse_aws_cloudwatch_log_subscription_message",
    "stdlib_parse_aws_vpc_flow_log",
    "stdlib_parse_apache_log",
    "stdlib_parse_cef",
    "stdlib_parse_common_log",
    "stdlib_parse_csv",
    "stdlib_parse_duration",
    "stdlib_parse_glog",
    "stdlib_parse_grok",
    "stdlib_parse_groks",
    "stdlib_parse_int",
    "stdlib_parse_json",
    "stdlib_parse_key_value",
    "stdlib_parse_klog",
    "stdlib_parse_linux_authorization",
    "stdlib_parse_logfmt",
    "stdlib_parse_nginx_log",
    "stdlib_parse_query_string",
    "stdlib_parse_regex",
    "stdlib_parse_regex_all",
    "stdlib_parse_ruby_hash",
    "stdlib_parse_syslog",
    "stdlib_parse_timestamp",
    "stdlib_parse_tokens",
    "stdlib_parse_url",
    "stdlib_parse_user_agent",
    "stdlib_parse_xml",
    "stdlib_push",
    "stdlib_random_bool",
    "stdlib_random_bytes",
    "stdlib_random_float",
    "stdlib_random_int",
    "stdlib_redact",
    "stdlib_remove",
    "stdlib_replace",
    "stdlib_reverse_dns",
    "stdlib_round",
    "stdlib_seahash",
    "stdlib_set",
    "stdlib_sha1",
    "stdlib_sha2",
    "stdlib_sha3",
    "stdlib_slice",
    "stdlib_split",
    "stdlib_starts_with",
    "stdlib_string",
    "stdlib_strip_ansi_escape_codes",
    "stdlib_strip_whitespace",
    "stdlib_strlen",
    "stdlib_tally",
    "stdlib_tally_value",
    "stdlib_tag_types_externally",
    "stdlib_timestamp",
    "stdlib_to_bool",
    "stdlib_to_float",
    "stdlib_to_int",
    "stdlib_to_string",
    "stdlib_to_regex",
    "stdlib_to_syslog_facility",
    "stdlib_to_syslog_level",
    "stdlib_to_syslog_severity",
    "stdlib_to_timestamp",
    "stdlib_to_unix_timestamp",
    "stdlib_truncate",
    "stdlib_type_def",
    "stdlib_unique",
    "stdlib_unnest",
    "stdlib_upcase",
    "stdlib_uuid_v4",
    "stdlib_values"
]

stdlib_abs = ["stdlib-core"]
stdlib_append = ["stdlib-core"]
stdlib_array = ["stdlib-core"]
stdlib_assert = ["stdlib-core"]
stdlib_assert_eq = ["stdlib-core"]
stdlib_boolean = ["stdlib-core"]
stdlib_ceil = ["stdlib-core"]
stdlib_chunks = ["stdlib-core"]
stdlib_compact = ["stdlib-core"]
stdlib_contains = ["stdlib-core"]
stdlib_cryptography = ["stdlib-core", "dep:aes", "dep:ctr", "dep:cbc", "dep:cfb-mode", "dep:ofb"]
stdlib_decode_base16 = ["stdlib-core", "dep:base16", "dep:nom"]
stdlib_decode_base64 = ["stdlib-core", "dep:base64"]
stdlib_decode_gzip = ["stdlib-core", "dep:flate2"]
stdlib_decode_percent = ["stdlib-core", "dep:percent-encoding"]
stdlib_decode_mime_q = ["stdlib-core", "dep:data-encoding","dep:charset","dep:quoted_printable", "dep:nom"]
stdlib_decode_zlib = ["stdlib-core", "dep:flate2"]
stdlib_decode_zstd = ["stdlib-core", "dep:zstd", "dep:nom"]
stdlib_decrypt = ["stdlib-core", "stdlib_cryptography", "stdlib_random_bytes", "stdlib_encrypt"]
stdlib_del = ["stdlib-core"]
stdlib_downcase = ["stdlib-core"]
stdlib_encode_base16 = ["stdlib-core", "dep:base16"]
stdlib_encode_base64 = ["stdlib-core", "dep:base64"]
stdlib_encode_gzip = ["stdlib-core", "dep:flate2", "dep:nom"]
stdlib_encode_json = ["stdlib-core", "dep:serde_json", "dep:chrono", "dep:regex"]
stdlib_encode_key_value = ["stdlib-core", "core"]
stdlib_encode_logfmt = ["stdlib-core", "stdlib_encode_key_value"]
stdlib_encode_percent = ["stdlib-core", "dep:percent-encoding"]
stdlib_encode_zlib = ["stdlib-core", "dep:flate2", "dep:nom"]
stdlib_encode_zstd = ["stdlib-core", "dep:zstd", "dep:nom"]
stdlib_encrypt = ["stdlib-core", "stdlib_cryptography"]
stdlib_ends_with = ["stdlib-core"]
stdlib_exists = ["stdlib-core"]
stdlib_filter = ["stdlib-core"]
stdlib_find = ["stdlib-core", "dep:regex"]
stdlib_find_table_row = ["stdlib-core"]
stdlib_flatten = ["stdlib-core"]
stdlib_float = ["stdlib-core"]
stdlib_floor = ["stdlib-core"]
stdlib_for_each = ["stdlib-core"]
stdlib_format_int = ["stdlib-core"]
stdlib_format_number = ["stdlib-core", "dep:rust_decimal"]
stdlib_format_timestamp = ["stdlib-core", "dep:chrono"]
stdlib_get = ["stdlib-core"]
stdlib_get_env_var = ["stdlib-core"]
stdlib_get_hostname = ["stdlib-core", "dep:hostname"]
stdlib_hmac = ["stdlib-core", "dep:hmac", "dep:sha-1", "dep:sha-2", "dep:hex", "dep:base64"]
stdlib_includes = ["stdlib-core"]
stdlib_integer = ["stdlib-core"]
stdlib_ip_aton = ["stdlib-core"]
stdlib_ip_cidr_contains = ["stdlib-core", "dep:cidr-utils"]
stdlib_ip_ntoa = ["stdlib-core"]
stdlib_ip_ntop = ["stdlib-core"]
stdlib_ip_pton = ["stdlib-core", "dep:bytes"]
stdlib_ip_subnet = ["stdlib-core", "dep:once_cell", "dep:regex"]
stdlib_ip_to_ipv6 = ["stdlib-core"]
stdlib_ipv6_to_ipv4 = ["stdlib-core"]
stdlib_is_array = ["stdlib-core"]
stdlib_is_boolean = ["stdlib-core"]
stdlib_is_empty = ["stdlib-core"]
stdlib_is_float = ["stdlib-core"]
stdlib_is_integer = ["stdlib-core"]
stdlib_is_ipv4 = ["stdlib-core"]
stdlib_is_ipv6 = ["stdlib-core"]
stdlib_is_json = ["stdlib-core", "dep:serde", "dep:serde_json"]
stdlib_is_null = ["stdlib-core"]
stdlib_is_nullish = ["stdlib-core"]
stdlib_is_object = ["stdlib-core"]
stdlib_is_regex = ["stdlib-core", "dep:regex"]
stdlib_is_string = ["stdlib-core"]
stdlib_is_timestamp = ["stdlib-core", "dep:chrono"]
stdlib_join = ["stdlib-core"]
stdlib_keys = ["stdlib-core"]
stdlib_length = ["stdlib-core"]
stdlib_log = ["stdlib-core", "dep:tracing"]
stdlib_map_keys = ["stdlib-core"]
stdlib_map_values = ["stdlib-core"]
stdlib_match = ["stdlib-core", "dep:regex"]
stdlib_match_any = ["stdlib-core", "dep:regex"]
stdlib_match_array = ["stdlib-core", "dep:regex"]
stdlib_match_datadog_query = ["stdlib-core", "datadog_search", "datadog_filter", "dep:once_cell", "dep:regex"]
stdlib_md5 = ["stdlib-core", "dep:md-5", "dep:hex"]
stdlib_merge = ["stdlib-core"]
stdlib_mod = ["stdlib-core"]
stdlib_now = ["stdlib-core", "dep:chrono"]
stdlib_object = ["stdlib-core"]
stdlib_parse_apache_log = ["stdlib-core", "dep:chrono", "dep:once_cell", "dep:regex"]
stdlib_parse_aws_alb_log = ["stdlib-core", "dep:nom"]
stdlib_parse_aws_cloudwatch_log_subscription_message = ["stdlib-core", "dep:serde_json", "dep:chrono"]
stdlib_parse_aws_vpc_flow_log = ["stdlib-core"]
stdlib_parse_common_log = ["stdlib-core", "dep:chrono", "dep:once_cell", "dep:regex"]
stdlib_parse_cef = ["stdlib-core", "stdlib_parse_key_value"]
stdlib_parse_csv = ["stdlib-core", "dep:csv"]
stdlib_parse_duration = ["stdlib-core", "dep:rust_decimal", "dep:once_cell", "dep:regex"]
stdlib_parse_glog = ["stdlib-core", "dep:chrono", "dep:once_cell", "dep:regex"]
stdlib_parse_grok = ["stdlib-core", "dep:grok"]
stdlib_parse_groks = ["stdlib-core", "dep:grok", "datadog_grok"]
stdlib_parse_int = ["stdlib-core"]
stdlib_parse_json = ["stdlib-core", "dep:serde_json"]
stdlib_parse_key_value = ["stdlib-core", "dep:nom"]
stdlib_parse_klog = ["stdlib-core", "dep:chrono", "dep:once_cell", "dep:regex"]
stdlib_parse_linux_authorization = ["stdlib-core", "stdlib_parse_syslog", "dep:chrono"]
stdlib_parse_logfmt = ["stdlib-core", "stdlib_parse_key_value"]
stdlib_parse_nginx_log = ["stdlib-core", "dep:chrono", "dep:regex", "dep:once_cell"]
stdlib_parse_query_string = ["stdlib-core", "dep:url"]
stdlib_parse_regex = ["stdlib-core", "dep:regex"]
stdlib_parse_regex_all = ["stdlib-core", "dep:regex"]
stdlib_parse_ruby_hash = ["stdlib-core", "dep:nom"]
stdlib_parse_syslog = ["stdlib-core", "dep:syslog_loose", "dep:chrono"]
stdlib_parse_timestamp = ["stdlib-core", "dep:chrono"]
stdlib_parse_tokens = ["stdlib-core", "core"]
stdlib_parse_url = ["stdlib-core", "dep:url"]
stdlib_parse_user_agent = ["stdlib-core", "dep:woothee","dep:uaparser","dep:once_cell"]
stdlib_parse_xml = ["stdlib-core", "dep:roxmltree", "dep:once_cell", "dep:regex", "dep:rust_decimal"]
stdlib_push = ["stdlib-core"]
stdlib_random_bool = ["stdlib-core", "dep:rand"]
stdlib_random_bytes = ["stdlib-core", "dep:rand"]
stdlib_random_float = ["stdlib-core", "dep:rand"]
stdlib_random_int = ["stdlib-core", "dep:rand"]
stdlib_redact = ["stdlib-core", "dep:once_cell", "dep:regex"]
stdlib_remove = ["stdlib-core"]
stdlib_replace = ["stdlib-core", "dep:regex"]
stdlib_reverse_dns = ["stdlib-core", "dep:dns-lookup"]
stdlib_round = ["stdlib-core"]
stdlib_seahash = ["stdlib-core", "dep:seahash"]
stdlib_set = ["stdlib-core"]
stdlib_sha1 = ["stdlib-core", "dep:sha-1", "dep:hex"]
stdlib_sha2 = ["stdlib-core", "dep:sha-2", "dep:hex"]
stdlib_sha3 = ["stdlib-core", "dep:sha-3", "dep:hex"]
stdlib_slice = ["stdlib-core"]
stdlib_split = ["stdlib-core", "dep:regex"]
stdlib_starts_with = ["stdlib-core", "dep:utf8-width"]
stdlib_string = ["stdlib-core"]
stdlib_strip_ansi_escape_codes = ["stdlib-core", "dep:bytes", "dep:strip-ansi-escapes"]
stdlib_strip_whitespace = ["stdlib-core"]
stdlib_strlen = ["stdlib-core"]
stdlib_tag_types_externally = ["stdlib-core", "dep:chrono", "dep:regex"]
stdlib_tally = ["stdlib-core"]
stdlib_tally_value = ["stdlib-core"]
stdlib_timestamp = ["stdlib-core"]
stdlib_to_bool = ["stdlib-core"]
stdlib_to_float = ["stdlib-core", "dep:chrono"]
stdlib_to_int = ["stdlib-core", "dep:chrono"]
stdlib_to_regex = ["stdlib-core", "dep:tracing", "dep:regex"]
stdlib_to_string = ["stdlib-core", "dep:chrono"]
stdlib_to_syslog_facility = ["stdlib-core"]
stdlib_to_syslog_level = ["stdlib-core"]
stdlib_to_syslog_severity = ["stdlib-core"]
stdlib_to_timestamp = ["stdlib-core", "dep:chrono"]
stdlib_to_unix_timestamp = ["stdlib-core", "dep:chrono"]
stdlib_type_def = ["stdlib-core"]
stdlib_truncate = ["stdlib-core"]
stdlib_unique = ["stdlib-core", "dep:indexmap"]
stdlib_unnest = ["stdlib-core"]
stdlib_upcase = ["stdlib-core"]
stdlib_uuid_v4 = ["stdlib-core", "dep:bytes", "dep:uuid"]
stdlib_values = ["stdlib-core"]

[dependencies]

# Optional dependencies
anymap = { version = "1.0.0-beta.2", optional = true }
ansi_term = {version = "0.12", optional = true }
arbitrary = { version = "1", optional = true, features = ["derive"] }
base16 = { version = "0.2", optional = true }
base64 = { version = "0.21", optional = true }
bytes = { version = "1.4.0", default-features = false, optional = true }
charset = { version = "0.1.3", optional = true }
chrono = { version = "0.4", default-features = false, features = ["clock", "serde"], optional = true }
chrono-tz = { version = "0.8.1", default-features = false, optional = true }
cidr-utils = { version = "0.5", optional = true }
csv = { version = "1.2", optional = true }
clap = { version = "4.1.11", features = ["derive"], optional = true }
codespan-reporting = {version = "0.11", optional = true }
data-encoding = { version = "2.3.3", optional = true }
dyn-clone = { version = "1.0.11", default-features = false, optional = true }
exitcode = {version = "1", optional = true }
flate2 = { version = "1.0.25", default-features = false, features = ["default"], optional = true }
getrandom = { version = "0.2", features = ["js"] }
hex = { version = "0.4", optional = true }
hmac = { version = "0.12.1", optional = true }
indexmap = { version = "~1.9.2", default-features = false, optional = true}
indoc = {version = "2.0.1", optional = true }
itertools = { version = "0.10.5", default-features = false, optional = true }
lalrpop-util = { version = "0.19", optional = true }
mlua = { version = "0.8.8", default-features = false, features = ["lua54", "send", "vendored"], optional = true}
nom = { version = "7.1.3", default-features = false, features = ["std"], optional = true }
once_cell = { version = "1.17", default-features = false, features = ["std"], optional = true }
ordered-float = { version = "3", default-features = false, optional = true }
md-5 = { version = "0.10", optional = true }
paste = { version = "1", default-features = false, optional = true }
peeking_take_while = { version = "1.0.0", default-features = false, optional = true }
percent-encoding = { version = "2.2", optional = true }
pest = { version = "2.5.6", default-features = false, optional = true, features = ["std"] }
pest_derive = { version = "2.5.6", default-features = false, optional = true, features = ["std"] }
prettydiff = {version = "0.6", optional = true }
prettytable-rs = { version = "0.10", default-features = false, optional = true }
quickcheck = { version = "1.0.3", optional = true }
quoted_printable = {version = "0.4.7", optional = true }
rand = { version = "0.8.5", optional = true }
regex = { version = "1", default-features = false, optional = true, features = ["std", "perf", "unicode"] }
roxmltree = { version = "0.18.0", optional = true }
rustyline = { version = "11", default-features = false, optional = true }
rust_decimal = { version = "1", optional = true }
seahash = { version = "4.1.0", optional = true }
serde = { version = "1", features = ["derive"], optional = true }
serde_json = { version = "1.0.94", default-features = false, optional = true, features = ["std", "raw_value"] }
sha-1 = { version = "0.10", optional = true }
sha-2 = { package = "sha2", version = "0.10", optional = true }
sha-3 = { package = "sha3", version = "0.10", optional = true }
strip-ansi-escapes = { version = "0.1", optional = true }
syslog_loose = { version = "0.18", optional = true }
termcolor = {version = "1", optional = true }
thiserror ={ version =  "1", optional = true }
tracing = { version = "0.1.34", default-features = false, optional = true }
uaparser = { version = "0.6.0", default-features = false, optional = true }
utf8-width = { version = "0.1.6", optional = true }
url = { version = "2", optional = true }
uuid = { version = "1", features = ["v4"], optional = true }
snafu = { version = "0.7", optional = true }
webbrowser = { version = "0.8", default-features = false, optional = true }
woothee = { version = "0.13.0", optional = true }

zstd = { version = "0.12.2", default-features = false, features = ["wasm"], optional = true }

# Cryptography
aes = { version = "0.8.2", optional = true }

# Cryptography - Block Modes
ctr = { version = "0.9.2", optional = true }
cbc = { version = "0.1.2", optional = true, features = ["alloc"] }
cfb-mode = { version = "0.8.2", optional = true }
ofb = { version = "0.6.1", optional = true }

# Dependencies that don't work in WASM
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
dns-lookup = { version = "1.0.8", optional = true }
hostname = { version = "0.3", optional = true }
grok = { version = "2", optional = true }
onig = { version = "6.4", default-features = false, optional = true }

[dev-dependencies]
anyhow = "1"
criterion = "0.4"
chrono-tz = "0.8"
serde_json = "1"
indoc = "2.0.1"
tracing-test = { version = "0.2", default-features = false }
toml = { version = "0.7.3", default-features = false }
mlua = { version = "0.8.8", default-features = false, features = ["lua54", "send", "vendored"]}
quickcheck = { version = "1.0.3"}
regex = { version = "1", default-features = false, features = ["std", "perf", "unicode"] }
paste = { version = "1", default-features = false }

[build-dependencies]
lalrpop = { version = "0.19.8", default-features = false }

[[bench]]
name = "kind"
harness = false

[[bench]]
name = "keyvalue"
harness = false

[[bench]]
name = "stdlib"
harness = false
required-features = ["default", "test"]
